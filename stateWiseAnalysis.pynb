{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model for State wise  Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "def pre(total_pop):\n",
    "    temp=[]\n",
    "    for i in total_pop:\n",
    "        k=str(i).split(',')\n",
    "        x=\"\"\n",
    "        for j in k:\n",
    "            x+=j\n",
    "        temp.append(int(x))\n",
    "    return temp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data uploading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"state_pop.csv\")\n",
    "df2=pd.read_csv(\"percapita.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>States</th>\n",
       "      <th>three_lpa_pop</th>\n",
       "      <th>ten_lpa_pop</th>\n",
       "      <th>tenPlus_pop</th>\n",
       "      <th>S. No.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Andhra Pradesh (AP)</td>\n",
       "      <td>18,959,462</td>\n",
       "      <td>885,993</td>\n",
       "      <td>195,535</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>227,690</td>\n",
       "      <td>10,463</td>\n",
       "      <td>2,297</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Assam</td>\n",
       "      <td>5,447,201</td>\n",
       "      <td>226,697</td>\n",
       "      <td>30,217</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bihar (BI)</td>\n",
       "      <td>16,883,440</td>\n",
       "      <td>258,752</td>\n",
       "      <td>34,447</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Chhattisgarh (CH)</td>\n",
       "      <td>4,267,675</td>\n",
       "      <td>186,996</td>\n",
       "      <td>36,386</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                States three_lpa_pop ten_lpa_pop tenPlus_pop  S. No.\n",
       "1  Andhra Pradesh (AP)    18,959,462     885,993     195,535       1\n",
       "2    Arunachal Pradesh       227,690      10,463       2,297       2\n",
       "3                Assam     5,447,201     226,697      30,217       3\n",
       "4           Bihar (BI)    16,883,440     258,752      34,447       4\n",
       "6    Chhattisgarh (CH)     4,267,675     186,996      36,386       5"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(\"S. No.\",inplace=True,ascending=True,kind='quicksort')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S. No.</th>\n",
       "      <th>State/UT</th>\n",
       "      <th>Per Capita Income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>93699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>103633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Assam</td>\n",
       "      <td>54618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Bihar</td>\n",
       "      <td>31380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>78001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   S. No.           State/UT  Per Capita Income\n",
       "0       1     Andhra Pradesh              93699\n",
       "1       2  Arunachal Pradesh             103633\n",
       "2       3              Assam              54618\n",
       "3       4              Bihar              31380\n",
       "4       5       Chhattisgarh              78001"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1081528,\n",
       " 12760,\n",
       " 256914,\n",
       " 293199,\n",
       " 223382,\n",
       " 70926,\n",
       " 1151764,\n",
       " 645855,\n",
       " 135016,\n",
       " 168190,\n",
       " 255353,\n",
       " 861102,\n",
       " 764314,\n",
       " 539587,\n",
       " 2398726,\n",
       " 19208,\n",
       " 31335,\n",
       " 21441,\n",
       " 52968,\n",
       " 287707,\n",
       " 712538,\n",
       " 719744,\n",
       " 8916,\n",
       " 1128636,\n",
       " 26800,\n",
       " 1553337,\n",
       " 129585,\n",
       " 1113204,\n",
       " 11757,\n",
       " 63695,\n",
       " 643463,\n",
       " 32033]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "middle_pop=pre(df[\"ten_lpa_pop\"].values)\n",
    "upper_pop=pre(df[\"tenPlus_pop\"].values)\n",
    "total=[]\n",
    "for i in range(len(middle_pop)):\n",
    "    total.append(int(middle_pop[i])+int(upper_pop[i]))\n",
    "total[:32]     #total population that can bear byuing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "per_capita=df2[\"Per Capita Income\"].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Commodity Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"flipkart_com-ecommerce_sample.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "uid=df[\"uniq_id\"].values\n",
    "p_name=df[\"product_name\"].values\n",
    "price=df[\"retail_price\"].values\n",
    "d_price=df[\"discounted_price\"].values\n",
    "brand=df[\"brand\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import math\n",
    "brand1=[]\n",
    "for i in range(len(brand)):\n",
    "    k=p_name[i].split()\n",
    "    try: \n",
    "        if(math.isnan(brand[i])):\n",
    "            brand1.append(k[0])\n",
    "    except:\n",
    "        brand1.append(brand[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "csv=pd.DataFrame({\"uniq_id\":uid,\"product_name\":p_name,\"retail_price\":price,\"discounted_price\":d_price,\"brand\":brand1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "csv.to_csv(\"dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "csv[\"retail_price\"]=csv[\"retail_price\"].fillna(csv[\"retail_price\"].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "csv[\"discounted_price\"]=csv[\"discounted_price\"].fillna(csv[\"discounted_price\"].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "csv.to_csv(\"dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "discounted_price=csv[\"discounted_price\"].values\n",
    "retail_price=csv[\"retail_price\"].values\n",
    "uid=csv[\"uniq_id\"].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"input_vector=[]\n",
    "for i in range(0,int(len(uid)//2)):\n",
    "    l=[]\n",
    "    for j in range(len(total)):\n",
    "        l.append([[retail_price[i]],[total[j]],[per_capita[j]]])\n",
    "    input_vector.append(l)\n",
    "test_input_vector=[]\n",
    "for i in range(len(uid)//2,len(uid)):\n",
    "    l=[]\n",
    "    for j in range(len(total)):\n",
    "        l.append([[retail_price[i]],[total[j]],[per_capita[j]]])\n",
    "    test_input_vector.append(l)\n",
    "\"\"\"\n",
    "input_vector=[]\n",
    "for i in range(0,len(uid)):\n",
    "    for j in range(len(total)):\n",
    "        input_vector.append([retail_price[i],total[j],per_capita[j]])\n",
    "len(input_vector[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[379.0,\n",
       " 22646.0,\n",
       " 499.0,\n",
       " 267.0,\n",
       " 210.0,\n",
       " 430.0,\n",
       " 479.0,\n",
       " 22646.0,\n",
       " 349.0,\n",
       " 479.0,\n",
       " 950.0,\n",
       " 910.0,\n",
       " 550.0,\n",
       " 379.0,\n",
       " 699.0,\n",
       " 379.0,\n",
       " 22646.0,\n",
       " 449.0,\n",
       " 999.0,\n",
       " 22646.0,\n",
       " 100.0,\n",
       " 550.0,\n",
       " 1039.0,\n",
       " 1500.0,\n",
       " 190.0,\n",
       " 699.0,\n",
       " 2499.0,\n",
       " 390.0,\n",
       " 309.0,\n",
       " 1699.0,\n",
       " 579.0,\n",
       " 699.0,\n",
       " 275.0,\n",
       " 275.0,\n",
       " 837.0,\n",
       " 699.0,\n",
       " 298.0,\n",
       " 899.0,\n",
       " 399.0,\n",
       " 764.0,\n",
       " 1349.0,\n",
       " 1499.0,\n",
       " 1899.0,\n",
       " 1400.0,\n",
       " 499.0,\n",
       " 449.0,\n",
       " 1049.0,\n",
       " 5000.0,\n",
       " 4990.0,\n",
       " 599.0,\n",
       " 449.0,\n",
       " 899.0,\n",
       " 4990.0,\n",
       " 449.0,\n",
       " 6600.0,\n",
       " 449.0,\n",
       " 449.0,\n",
       " 599.0,\n",
       " 550.0,\n",
       " 699.0,\n",
       " 499.0,\n",
       " 849.0,\n",
       " 599.0,\n",
       " 449.0,\n",
       " 449.0,\n",
       " 924.0,\n",
       " 499.0,\n",
       " 395.0,\n",
       " 795.0,\n",
       " 250.0,\n",
       " 695.0,\n",
       " 899.0,\n",
       " 1393.0,\n",
       " 230.0,\n",
       " 449.0,\n",
       " 395.0,\n",
       " 550.0,\n",
       " 1299.0,\n",
       " 380.0,\n",
       " 899.0,\n",
       " 698.0,\n",
       " 650.0,\n",
       " 698.0,\n",
       " 499.0,\n",
       " 1200.0,\n",
       " 949.0,\n",
       " 590.0,\n",
       " 599.0,\n",
       " 15195.0,\n",
       " 1995.0,\n",
       " 13099.0,\n",
       " 1223.0,\n",
       " 24400.0,\n",
       " 595.0,\n",
       " 449.0,\n",
       " 2599.0,\n",
       " 2250.0,\n",
       " 849.0,\n",
       " 719.0,\n",
       " 1202.0,\n",
       " 399.0,\n",
       " 999.0,\n",
       " 2099.0,\n",
       " 399.0,\n",
       " 2795.0,\n",
       " 1249.0,\n",
       " 4995.0,\n",
       " 2299.0,\n",
       " 107750.0,\n",
       " 3146.0,\n",
       " 1270.0,\n",
       " 1817.0,\n",
       " 1919.0,\n",
       " 3221.0,\n",
       " 429.0,\n",
       " 3995.0,\n",
       " 571230.0,\n",
       " 899.0,\n",
       " 499.0,\n",
       " 699.0,\n",
       " 2799.0,\n",
       " 899.0,\n",
       " 999.0,\n",
       " 952.0,\n",
       " 1299.0,\n",
       " 2621.0,\n",
       " 849.0,\n",
       " 639.0,\n",
       " 2395.0,\n",
       " 399.0,\n",
       " 1812.0,\n",
       " 2274.0,\n",
       " 350.0,\n",
       " 2771.0,\n",
       " 201000.0,\n",
       " 1359.0,\n",
       " 1599.0,\n",
       " 399.0,\n",
       " 525.0,\n",
       " 2399.0,\n",
       " 899.0,\n",
       " 3499.0,\n",
       " 2069.0,\n",
       " 263.0,\n",
       " 959.0,\n",
       " 1099.0,\n",
       " 333.0,\n",
       " 595.0,\n",
       " 144.0,\n",
       " 3999.0,\n",
       " 899.0,\n",
       " 899.0,\n",
       " 549.0,\n",
       " 1899.0,\n",
       " 2995.0,\n",
       " 1149.0,\n",
       " 1049.0,\n",
       " 899.0,\n",
       " 1695.0,\n",
       " 1695.0,\n",
       " 599.0,\n",
       " 3499.0,\n",
       " 200.0,\n",
       " 1149.0,\n",
       " 526.0,\n",
       " 1765.0,\n",
       " 1829.0,\n",
       " 9997.0,\n",
       " 1619.0,\n",
       " 1199.0,\n",
       " 299.0,\n",
       " 150.0,\n",
       " 150.0,\n",
       " 1270.0,\n",
       " 1699.0,\n",
       " 3499.0,\n",
       " 149.0,\n",
       " 1699.0,\n",
       " 1299.0,\n",
       " 350.0,\n",
       " 499.0,\n",
       " 1899.0,\n",
       " 1099.0,\n",
       " 899.0,\n",
       " 499.0,\n",
       " 1249.0,\n",
       " 499.0,\n",
       " 2559.0,\n",
       " 645.0,\n",
       " 1695.0,\n",
       " 159.0,\n",
       " 1249.0,\n",
       " 1999.0,\n",
       " 780.0,\n",
       " 2295.0,\n",
       " 249.0,\n",
       " 4495.0,\n",
       " 2099.0,\n",
       " 1179.0,\n",
       " 999.0,\n",
       " 1995.0,\n",
       " 1199.0,\n",
       " 1650.0,\n",
       " 600.0,\n",
       " 1350.0,\n",
       " 2799.0,\n",
       " 2399.0,\n",
       " 1765.0,\n",
       " 1999.0,\n",
       " 639.0,\n",
       " 1567.0,\n",
       " 1800.0,\n",
       " 3746.0,\n",
       " 299.0,\n",
       " 1574.0,\n",
       " 800.0,\n",
       " 599.0,\n",
       " 8545.0,\n",
       " 2050.0,\n",
       " 999.0,\n",
       " 499.0,\n",
       " 555.0,\n",
       " 719.0,\n",
       " 2559.0,\n",
       " 999.0,\n",
       " 699.0,\n",
       " 595.0,\n",
       " 2559.0,\n",
       " 2099.0,\n",
       " 449.0,\n",
       " 1895.0,\n",
       " 1999.0,\n",
       " 499.0,\n",
       " 262.0,\n",
       " 1820.0,\n",
       " 2495.0,\n",
       " 1299.0,\n",
       " 1249.0,\n",
       " 999.0,\n",
       " 1039.0,\n",
       " 999.0,\n",
       " 2395.0,\n",
       " 2150.0,\n",
       " 7495.0,\n",
       " 3199.0,\n",
       " 2519.0,\n",
       " 599.0,\n",
       " 1099.0,\n",
       " 699.0,\n",
       " 2650.0,\n",
       " 995.0,\n",
       " 599.0,\n",
       " 900.0,\n",
       " 2239.0,\n",
       " 849.0,\n",
       " 1900.0,\n",
       " 1299.0,\n",
       " 2621.0,\n",
       " 299.0,\n",
       " 1345.0,\n",
       " 599.0,\n",
       " 595.0,\n",
       " 1795.0,\n",
       " 795.0,\n",
       " 950.0,\n",
       " 999.0,\n",
       " 299.0,\n",
       " 499.0,\n",
       " 1316.0,\n",
       " 499.0,\n",
       " 899.0,\n",
       " 3599.0,\n",
       " 1800.0,\n",
       " 2399.0,\n",
       " 1099.0,\n",
       " 499.0,\n",
       " 999.0,\n",
       " 1199.0,\n",
       " 599.0,\n",
       " 2239.0,\n",
       " 750.0,\n",
       " 479.0,\n",
       " 1599.0,\n",
       " 719.0,\n",
       " 3521.0,\n",
       " 6645.0,\n",
       " 1799.0,\n",
       " 1207.0,\n",
       " 2799.0,\n",
       " 639.0,\n",
       " 1149.0,\n",
       " 1235.0,\n",
       " 1299.0,\n",
       " 599.0,\n",
       " 650.0,\n",
       " 2795.0,\n",
       " 595.0,\n",
       " 595.0,\n",
       " 595.0,\n",
       " 595.0,\n",
       " 399.0,\n",
       " 979.0,\n",
       " 336.0,\n",
       " 799.0,\n",
       " 399.0,\n",
       " 979.0,\n",
       " 979.0,\n",
       " 770.0,\n",
       " 1598.0,\n",
       " 2398.0,\n",
       " 339.0,\n",
       " 299.0,\n",
       " 979.0,\n",
       " 979.0,\n",
       " 979.0,\n",
       " 247.0,\n",
       " 499.0,\n",
       " 1160.0,\n",
       " 339.0,\n",
       " 1200.0,\n",
       " 399.0,\n",
       " 1270.0,\n",
       " 399.0,\n",
       " 63.0,\n",
       " 748.0,\n",
       " 399.0,\n",
       " 399.0,\n",
       " 1000.0,\n",
       " 1299.0,\n",
       " 1899.0,\n",
       " 1299.0,\n",
       " 128.0,\n",
       " 999.0,\n",
       " 499.0,\n",
       " 1299.0,\n",
       " 493.0,\n",
       " 239.0,\n",
       " 1899.0,\n",
       " 498.0,\n",
       " 1299.0,\n",
       " 699.0,\n",
       " 9499.0,\n",
       " 1299.0,\n",
       " 1899.0,\n",
       " 12499.0,\n",
       " 449.0,\n",
       " 1899.0,\n",
       " 1299.0,\n",
       " 1899.0,\n",
       " 699.0,\n",
       " 999.0,\n",
       " 1299.0,\n",
       " 1825.0,\n",
       " 999.0,\n",
       " 1039.0,\n",
       " 4999.0,\n",
       " 818.0,\n",
       " 616.0,\n",
       " 1955.0,\n",
       " 375.0,\n",
       " 795.0,\n",
       " 880.0,\n",
       " 1215.0,\n",
       " 687.0,\n",
       " 743.0,\n",
       " 968.0,\n",
       " 249.0,\n",
       " 8440.0,\n",
       " 359.0,\n",
       " 17433.0,\n",
       " 299.0,\n",
       " 1499.0,\n",
       " 799.0,\n",
       " 1469.0,\n",
       " 399.0,\n",
       " 34221.0,\n",
       " 7781.0,\n",
       " 964.0,\n",
       " 999.0,\n",
       " 349.0,\n",
       " 349.0,\n",
       " 349.0,\n",
       " 1399.0,\n",
       " 499.0,\n",
       " 749.0,\n",
       " 399.0,\n",
       " 421.0,\n",
       " 699.0,\n",
       " 399.0,\n",
       " 1049.0,\n",
       " 449.0,\n",
       " 499.0,\n",
       " 367.0,\n",
       " 367.0,\n",
       " 32973.0,\n",
       " 29366.0,\n",
       " 999.0,\n",
       " 699.0,\n",
       " 799.0,\n",
       " 799.0,\n",
       " 999.0,\n",
       " 899.0,\n",
       " 999.0,\n",
       " 699.0,\n",
       " 999.0,\n",
       " 999.0,\n",
       " 799.0,\n",
       " 699.0,\n",
       " 599.0,\n",
       " 599.0,\n",
       " 22644.0,\n",
       " 35056.0,\n",
       " 27223.0,\n",
       " 695.0,\n",
       " 1500.0,\n",
       " 36234.0,\n",
       " 342.0,\n",
       " 36872.0,\n",
       " 599.0,\n",
       " 710.0,\n",
       " 545.0,\n",
       " 499.0,\n",
       " 710.0,\n",
       " 2760.0,\n",
       " 2360.0,\n",
       " 1880.0,\n",
       " 1019.0,\n",
       " 2360.0,\n",
       " 2130.0,\n",
       " 1570.0,\n",
       " 26984.0,\n",
       " 299.0,\n",
       " 479.0,\n",
       " 480.0,\n",
       " 725.0,\n",
       " 11229.0,\n",
       " 1499.0,\n",
       " 5499.0,\n",
       " 849.0,\n",
       " 828.0,\n",
       " 757.0,\n",
       " 775.0,\n",
       " 850.0,\n",
       " 899.0,\n",
       " 899.0,\n",
       " 699.0,\n",
       " 599.0,\n",
       " 829.0,\n",
       " 829.0,\n",
       " 499.0,\n",
       " 365.0,\n",
       " 850.0,\n",
       " 450.0,\n",
       " 355.0,\n",
       " 499.0,\n",
       " 1595.0,\n",
       " 28963.0,\n",
       " 872.0,\n",
       " 899.0,\n",
       " 899.0,\n",
       " 700.0,\n",
       " 8538.0,\n",
       " 579.0,\n",
       " 999.0,\n",
       " 689.0,\n",
       " 1295.0,\n",
       " 28317.0,\n",
       " 20672.0,\n",
       " 20727.0,\n",
       " 971.0,\n",
       " 20749.0,\n",
       " 20586.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 1025.0,\n",
       " 949.0,\n",
       " 439.0,\n",
       " 310.0,\n",
       " 42262.0,\n",
       " 37787.0,\n",
       " 31033.0,\n",
       " 2050.0,\n",
       " 29292.0,\n",
       " 899.0,\n",
       " 899.0,\n",
       " 849.0,\n",
       " 899.0,\n",
       " 899.0,\n",
       " 6403.0,\n",
       " 799.0,\n",
       " 999.0,\n",
       " 399.0,\n",
       " 599.0,\n",
       " 480.0,\n",
       " 30817.0,\n",
       " 30741.0,\n",
       " 299.0,\n",
       " 399.0,\n",
       " 760.0,\n",
       " 1119.0,\n",
       " 449.0,\n",
       " 1399.0,\n",
       " 1189.0,\n",
       " 1469.0,\n",
       " 1685.0,\n",
       " 909.0,\n",
       " 34110.0,\n",
       " 1095.0,\n",
       " 788.0,\n",
       " 1650.0,\n",
       " 1195.0,\n",
       " 319.0,\n",
       " 319.0,\n",
       " 23949.0,\n",
       " 31673.0,\n",
       " 31663.0,\n",
       " 1200.0,\n",
       " 595.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 2000.0,\n",
       " 1050.0,\n",
       " 359.0,\n",
       " 399.0,\n",
       " 999.0,\n",
       " 1015.0,\n",
       " 31062.0,\n",
       " 20717.0,\n",
       " 1299.0,\n",
       " 2589.0,\n",
       " 2309.0,\n",
       " 2099.0,\n",
       " 399.0,\n",
       " 12576.0,\n",
       " 11286.0,\n",
       " 8265.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 398.0,\n",
       " 681.0,\n",
       " 681.0,\n",
       " 610.0,\n",
       " 440.0,\n",
       " 1364.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 13010.0,\n",
       " 1049.0,\n",
       " 979.0,\n",
       " 591.0,\n",
       " 855.0,\n",
       " 645.0,\n",
       " 649.0,\n",
       " 10213.0,\n",
       " 10227.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 585.0,\n",
       " 899.0,\n",
       " 6821.0,\n",
       " 899.0,\n",
       " 600.0,\n",
       " 849.0,\n",
       " 7420.0,\n",
       " 899.0,\n",
       " 499.0,\n",
       " 749.0,\n",
       " 750.0,\n",
       " 749.0,\n",
       " 719.0,\n",
       " 799.0,\n",
       " 749.0,\n",
       " 849.0,\n",
       " 749.0,\n",
       " 1499.0,\n",
       " 749.0,\n",
       " 1025.0,\n",
       " 749.0,\n",
       " 649.0,\n",
       " 1619.0,\n",
       " 9414.0,\n",
       " 9848.0,\n",
       " 28313.0,\n",
       " 1624.0,\n",
       " 1624.0,\n",
       " 420.0,\n",
       " 1495.0,\n",
       " 2095.0,\n",
       " 408.0,\n",
       " 499.0,\n",
       " 890.0,\n",
       " 8835.0,\n",
       " 3370.0,\n",
       " 499.0,\n",
       " 2400.0,\n",
       " 950.0,\n",
       " 2880.0,\n",
       " 499.0,\n",
       " 1685.0,\n",
       " 839.0,\n",
       " 1475.0,\n",
       " 2175.0,\n",
       " 1799.0,\n",
       " 899.0,\n",
       " 3025.0,\n",
       " 1955.0,\n",
       " 2500.0,\n",
       " 1299.0,\n",
       " 2880.0,\n",
       " 3370.0,\n",
       " 4699.0,\n",
       " 8255.0,\n",
       " 369.0,\n",
       " 360.0,\n",
       " 370.0,\n",
       " 370.0,\n",
       " 370.0,\n",
       " 360.0,\n",
       " 369.0,\n",
       " 20581.0,\n",
       " 779.0,\n",
       " 549.0,\n",
       " 439.0,\n",
       " 15916.0,\n",
       " 1499.0,\n",
       " 987.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 840.0,\n",
       " 840.0,\n",
       " 825.0,\n",
       " 659.0,\n",
       " 800.0,\n",
       " 20423.0,\n",
       " 1990.0,\n",
       " 2070.0,\n",
       " 2007.0,\n",
       " 2120.0,\n",
       " 2055.0,\n",
       " 2630.0,\n",
       " 2455.0,\n",
       " 1995.0,\n",
       " 1995.0,\n",
       " 37058.0,\n",
       " 1079.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 909.0,\n",
       " 546.0,\n",
       " 1999.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 600.0,\n",
       " 769.0,\n",
       " 299.0,\n",
       " 600.0,\n",
       " 600.0,\n",
       " 499.0,\n",
       " 28011.0,\n",
       " 700.0,\n",
       " 33298.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 799.0,\n",
       " 899.0,\n",
       " 499.0,\n",
       " 199.0,\n",
       " 35698.0,\n",
       " 449.0,\n",
       " 349.0,\n",
       " 33702.0,\n",
       " 38964.0,\n",
       " 799.0,\n",
       " 899.0,\n",
       " 799.0,\n",
       " 799.0,\n",
       " 1537.0,\n",
       " 1375.0,\n",
       " 1925.0,\n",
       " 1975.0,\n",
       " 1637.0,\n",
       " 1375.0,\n",
       " 1733.0,\n",
       " 2125.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 499.0,\n",
       " 1899.0,\n",
       " 1799.0,\n",
       " 1899.0,\n",
       " 1899.0,\n",
       " 1899.0,\n",
       " 31471.0,\n",
       " 779.0,\n",
       " 33519.0,\n",
       " 33607.0,\n",
       " 33761.0,\n",
       " 1899.0,\n",
       " 1589.0,\n",
       " 1225.0,\n",
       " 445.0,\n",
       " 30409.0,\n",
       " 1475.0,\n",
       " 1475.0,\n",
       " 1109.0,\n",
       " 850.0,\n",
       " 389.0,\n",
       " 1099.0,\n",
       " 12183.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 1499.0,\n",
       " 3200.0,\n",
       " 4250.0,\n",
       " 3250.0,\n",
       " 900.0,\n",
       " 756.0,\n",
       " 650.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 750.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 1200.0,\n",
       " 900.0,\n",
       " 900.0,\n",
       " 909.0,\n",
       " 1595.0,\n",
       " 699.0,\n",
       " 699.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 606.0,\n",
       " 7885.0,\n",
       " 797.0,\n",
       " 399.0,\n",
       " 449.0,\n",
       " 550.0,\n",
       " 299.0,\n",
       " 299.0,\n",
       " 299.0,\n",
       " 249.0,\n",
       " 2525.0,\n",
       " 1366.0,\n",
       " 1238.0,\n",
       " 32255.0,\n",
       " 1624.0,\n",
       " 1364.0,\n",
       " 756.0,\n",
       " 756.0,\n",
       " 8222.0,\n",
       " 610.0,\n",
       " 756.0,\n",
       " 6800.0,\n",
       " 756.0,\n",
       " 420.0,\n",
       " 21900.0,\n",
       " 756.0,\n",
       " 499.0,\n",
       " 979.0,\n",
       " 550.0,\n",
       " 20438.0,\n",
       " 1795.0,\n",
       " 749.0,\n",
       " 2999.0,\n",
       " 799.0,\n",
       " 949.0,\n",
       " 2899.0,\n",
       " 799.0,\n",
       " 599.0,\n",
       " 3500.0,\n",
       " 12094.0,\n",
       " 399.0,\n",
       " 39875.0,\n",
       " 1494.0,\n",
       " 628.0,\n",
       " 310.0,\n",
       " 590.0,\n",
       " 599.0,\n",
       " 349.0,\n",
       " 199.0,\n",
       " 359.0,\n",
       " 315.0,\n",
       " 14450.0,\n",
       " 14001.0,\n",
       " 22904.0,\n",
       " 550.0,\n",
       " 499.0,\n",
       " 979.0,\n",
       " 450.0,\n",
       " 700.0,\n",
       " 699.0,\n",
       " 598.0,\n",
       " 699.0,\n",
       " 749.0,\n",
       " 749.0,\n",
       " 899.0,\n",
       " 37905.0,\n",
       " 40178.0,\n",
       " 1700.0,\n",
       " 1499.0,\n",
       " 38808.0,\n",
       " 999.0,\n",
       " 899.0,\n",
       " 795.0,\n",
       " 13120.0,\n",
       " 990.0,\n",
       " 539.0,\n",
       " 417.0,\n",
       " 449.0,\n",
       " 796.0,\n",
       " 749.0,\n",
       " 245.0,\n",
       " 280.0,\n",
       " 270.0,\n",
       " 270.0,\n",
       " 245.0,\n",
       " 245.0,\n",
       " 24624.0,\n",
       " 522.0,\n",
       " 766.0,\n",
       " 766.0,\n",
       " 731.0,\n",
       " 600.0,\n",
       " 550.0,\n",
       " 899.0,\n",
       " 499.0,\n",
       " 399.0,\n",
       " 399.0,\n",
       " 571.0,\n",
       " 571.0,\n",
       " 799.0,\n",
       " 742.0,\n",
       " 1380.0,\n",
       " 500.0,\n",
       " 850.0,\n",
       " 952.0,\n",
       " 839.0,\n",
       " 699.0,\n",
       " 850.0,\n",
       " 670.0,\n",
       " 973.0,\n",
       " 939.0,\n",
       " 1011.0,\n",
       " 1119.0,\n",
       " 952.0,\n",
       " 903.0,\n",
       " 399.0,\n",
       " 599.0,\n",
       " 479.0,\n",
       " 734.0,\n",
       " 15598.0,\n",
       " 299.0,\n",
       " 399.0,\n",
       " 43663.0,\n",
       " 22459.0,\n",
       " 25414.0,\n",
       " 26054.0,\n",
       " 8689.0,\n",
       " 1100.0,\n",
       " 499.0,\n",
       " 499.0,\n",
       " 649.0,\n",
       " 399.0,\n",
       " 399.0,\n",
       " 4958.0,\n",
       " 1127.0,\n",
       " 1299.0,\n",
       " 1399.0,\n",
       " 175.0,\n",
       " 175.0,\n",
       " 499.0,\n",
       " 399.0,\n",
       " 350.0,\n",
       " 1935.0,\n",
       " 129.0,\n",
       " 549.0,\n",
       " 1000.0,\n",
       " 16990.0,\n",
       " 800.0,\n",
       " 1999.0,\n",
       " 250.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 249.0,\n",
       " 1399.0,\n",
       " 1099.0,\n",
       " 2081.0,\n",
       " 1299.0,\n",
       " 599.0,\n",
       " 399.0,\n",
       " 309.0,\n",
       " 2499.0,\n",
       " 1245.0,\n",
       " 399.0,\n",
       " 299.0,\n",
       " 400.0,\n",
       " 350.0,\n",
       " 399.0,\n",
       " 399.0,\n",
       " 399.0,\n",
       " 309.0,\n",
       " 649.0,\n",
       " 649.0,\n",
       " 2519.0,\n",
       " 259.0,\n",
       " 949.0,\n",
       " 259.0,\n",
       " 849.0,\n",
       " 649.0,\n",
       " 999.0,\n",
       " 1248.0,\n",
       " 649.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 649.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 1978.0,\n",
       " 849.0,\n",
       " 259.0,\n",
       " 1126.0,\n",
       " 649.0,\n",
       " 259.0,\n",
       " 649.0,\n",
       " 949.0,\n",
       " 649.0,\n",
       " 949.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 1425.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 259.0,\n",
       " 649.0,\n",
       " 259.0,\n",
       " 1319.0,\n",
       " 649.0,\n",
       " 649.0,\n",
       " 849.0,\n",
       " 399.0,\n",
       " 599.0,\n",
       " 1197.0,\n",
       " 809.0,\n",
       " 289.0,\n",
       " 575.0,\n",
       " 499.0,\n",
       " 1400.0,\n",
       " 2624.0,\n",
       " 499.0,\n",
       " 400.0,\n",
       " 999.0,\n",
       " 599.0,\n",
       " 419.0,\n",
       " 299.0,\n",
       " 660.0,\n",
       " 1049.0,\n",
       " 2200.0,\n",
       " 4375.0,\n",
       " ...]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"label=[]\n",
    "for i in range(len(discounted_price)):\n",
    "    l=[]\n",
    "    for j in range(len(total)):\n",
    "        l.append([discounted_price[i] *100 /per_capita[j]])\n",
    "    label.append(l)\n",
    "len(label[0])\n",
    "\"\"\"\n",
    "label=[]\n",
    "for i in range(len(discounted_price)):\n",
    "    label.append(discounted_price[i])\n",
    "label\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Multi-layer Perceptron regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "clf = MLPRegressor(solver='adam', alpha=0.0001,hidden_layer_sizes=(5, 3), random_state=0, learning_rate=\"constant\", learning_rate_init=0.06,activation=\"relu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "       beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "       hidden_layer_sizes=(5, 3), learning_rate='constant',\n",
       "       learning_rate_init=0.06, max_iter=200, momentum=0.9,\n",
       "       nesterovs_momentum=True, power_t=0.5, random_state=0, shuffle=True,\n",
       "       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,\n",
       "       warm_start=False)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(input_vector[0:len(label)//2],label[0:len(label)//2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "k=clf.predict(input_vector[:1000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nEtj/D3mQHBWskRe7AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x71a578a198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(k,label[:1000], c=\"green\",s=30, alpha=0.1,label=(\"predicted\",\"actual\"))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
